/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */

// This example requires the Visualization library. Include the libraries=visualization
// parameter when you first load the API. For example:
// <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=visualization">

let map: google.maps.Map, heatmap: google.maps.visualization.HeatmapLayer;

function initMap(): void {
  map = new google.maps.Map(document.getElementById("map") as HTMLElement, {
    zoom: 13,
    center: { lat: 18.51957, lng: 73.85535 },
    mapTypeId: "satellite",
  });

  heatmap = new google.maps.visualization.HeatmapLayer({
    data: getPoints(),
    map: map,
  });

  document
    .getElementById("toggle-heatmap")!
    .addEventListener("click", toggleHeatmap);
  document
    .getElementById("change-gradient")!
    .addEventListener("click", changeGradient);
  document
    .getElementById("change-opacity")!
    .addEventListener("click", changeOpacity);
  document
    .getElementById("change-radius")!
    .addEventListener("click", changeRadius);
}

function toggleHeatmap(): void {
  heatmap.setMap(heatmap.getMap() ? null : map);
}

function changeGradient(): void {
  const gradient = [
    "rgba(0, 255, 255, 0)",
    "rgba(0, 255, 255, 1)",
    "rgba(0, 191, 255, 1)",
    "rgba(0, 127, 255, 1)",
    "rgba(0, 63, 255, 1)",
    "rgba(0, 0, 255, 1)",
    "rgba(0, 0, 223, 1)",
    "rgba(0, 0, 191, 1)",
    "rgba(0, 0, 159, 1)",
    "rgba(0, 0, 127, 1)",
    "rgba(63, 0, 91, 1)",
    "rgba(127, 0, 63, 1)",
    "rgba(191, 0, 31, 1)",
    "rgba(255, 0, 0, 1)",
  ];

  heatmap.set("gradient", heatmap.get("gradient") ? null : gradient);
}

function changeRadius(): void {
  heatmap.set("radius", heatmap.get("radius") ? null : 15);
}

function changeOpacity(): void {
  heatmap.set("opacity", heatmap.get("opacity") ? null : 0.2);
}
const data = [
  [20.4318, 73.8143],
  [19.0966, 74.7533],
  [20.415444, 73.86],
  [17.669497, 73.990664],
  [20.706111, 76.99],
  [17.894194, 75.022694],
  [19.5827, 73.6612],
  [16.643, 73.3311],
  [19.916667, 73.566667],
  [17.571472, 73.151806],
  [20.187222, 74.447639],
  [20.27, 75.13],
  [19.46577, 72.73247],
  [19.820417, 72.921111],
  [19.7605, 72.8146],
  [18.474111, 73.118639],
  [19.8941, 75.3181],
  [19.746333, 73.837167],
  [20.670278, 76.773611],
  [19.850836, 79.341875],
  [17.973222, 73.042528],
  [18.507953, 74.704133],
  [19.005524, 73.028403],
  [18.423528, 73.041917],
  [19.653831, 73.786142],
  [16.182472, 73.496778],
  [19.2124071, 73.0946379],
  [21.0705, 74.3358],
  [16.171028, 73.498667],
  [19.903972, 73.430667],
  [19.584278, 72.746639],
  [19.049556, 73.568444],
  [16.2526, 74.1409],
  [19.818928, 73.293575],
  [17.464722, 74.406389],
  [19.04177, 72.81858],
  [19.9401, 79.3126],
  [17.847417, 74.044806],
  [18.001083, 73.619444],
  [20.336833, 74.259167],
  [20.575155, 74.099934],
  [19.236861, 73.748222],
  [17.379249, 73.864191],
  [19.514167, 72.772222],
  [19.942724, 75.213164],
  [20.85225, 74.284917],
  [16.387139, 73.37225],
  [18.507953, 74.704133],
  [20.385583, 74.030889],
  [20.620306, 74.341972],
  [19.31, 72.793],
  [18.866944, 72.935917],
  [19.9308, 73.51534],
  [19.2454, 73.1186],
  [17.815528, 73.090611],
  [18.9409, 72.83759],
  [16.5433, 73.8182],
  [20.7733387, 74.5333314],
  [20.055083, 73.050417],
  [21.382222, 77.333889],
  [18.54575, 73.359583],
  [19.884861, 73.641528],
  [19.2962, 72.8883],
  [18.364194, 73.090444],
  [20.700146, 76.567901],
  [19.192194, 73.540778],
  [17.546528, 73.487806],
  [19.270306, 73.802583],
  [20.754944, 74.039389],
  [19.904972, 73.472],
  [19.388333, 73.775833],
  [20.5416, 73.7605],
  [18.9351, 73.2325],
  [18.736056, 73.714083],
  [20.361333, 74.209306],
  [18.3955, 74.0029],
  [19.0675, 74.5191],
  [20.809378, 75.778923],
  [17.3007, 73.2215],
  [17.453556, 73.693778],
  [18.299589, 72.964425],
  [20.374167, 73.957528],
  [19.2775, 73.686667],
  [15.8601423, 74.2524129],
  [18.982778, 73.22],
  [19.4226, 73.7592],
  [19.6913141, 72.8170717],
  [17.7791, 74.1267],
  [17.967278, 73.745194],
  [19.48246, 72.98559],
  [18.9005, 77.2014],
  [20.3735, 74.1093],
  [20.706667, 74.486611],
  [18.881667, 73.118056],
  [19.773083, 73.619389],
  [19.618083, 72.728278],
  [18.535833, 72.908056],
  [18.7042, 72.8131],
  [19.6700315, 72.9875099],
  [18.6344, 72.8642],
  [20.378472, 74.170083],
  [18.294222, 73.422722],
  [18.535833, 72.908056],
  [18.620278, 73.385556],
  [18.992306, 73.512667],
  [19.591694, 73.639278],
  [19.392361, 73.862],
  [18.365222, 73.405917],
  [20.812, 74.7395],
  [18.2533, 73.5024],
  [18.708889, 73.476667],
  [17.5661, 75.5619],
  [17.163528, 74.268833],
  [19.589722, 73.649167],
  [19.132283, 72.794785],
  [19.039848, 72.837768],
  [17.7033939, 74.462843],
  [15.902472, 74.386639],
  [17.838917, 73.498722],
  [19.835972, 77.925694],
  [19.4838, 73.2588],
  [17.849333, 73.603389],
  [19.110056, 73.178194],
  [20.545389, 74.529889],
  [18.407331, 74.042667],
  [18.8316, 73.3948],
  [17.979833, 73.243611],
  [18.312028, 73.351111],
  [18.051528, 73.579361],
  [20.842222, 74.084444],
  [19.675167, 79.125417],
  [18.825917, 73.193028],
  [19.2507, 74.749],
  [16.050389, 73.969972],
  [20.384861, 73.92775],
  [18.965633, 72.842703],
  [20.442556, 73.894417],
  [18.077528, 73.620778],
  [18.5203, 73.8567],
  [20.753083, 74.066639],
  [18.688833, 73.364361],
  [20.781389, 74.063889],
  [17.82, 76.3],
  [19.14172, 77.324825],
  [19.282778, 74.032278],
  [21.236, 77.0232],
  [20.833111, 74.044861],
  [19.294956, 73.773003],
  [15.939, 73.511639],
  [19.482361, 73.752833],
  [19.0525, 73.522694],
  [18.322142, 72.932647],
  [19.2821, 74.4009],
  [17.8153, 73.3511],
  [17.9979951, 73.8636349],
  [16.808889, 74.109167],
  [18.2708, 75.4543],
  [15.8169, 74.045],
  [19.707278, 73.836278],
  [19.4647, 74.093],
  [20.850917, 74.223083],
  [18.973333, 73.224167],
  [17.226111, 73.691667],
  [17.936111, 73.5775],
  [18.280778, 73.973611],
  [16.808028, 73.314917],
  [16.0775, 73.850833],
  [18.233611, 73.440556],
  [18.246111, 73.682222],
  [20.386639, 74.194444],
  [20.112195, 73.767354],
  [21.398414, 79.337789],
  [17.764722, 73.511944],
  [19.5, 73.683333],
  [16.996, 73.271],
  [20.372083, 73.970583],
  [18.547167, 72.927694],
  [18.102778, 73.820833],
  [18.656083, 72.958917],
  [17.649694, 73.911944],
  [20.7222604, 73.9454556],
  [20.722441, 73.9536738],
  [20.21205, 76.37085],
  [16.1765, 74.4048],
  [17.858, 74.321],
  [18.5427677, 73.2277393],
  [18.6344, 72.8642],
  [19.000635, 72.860363],
  [18.5195, 73.8553],
  [19.696167, 72.7135],
  [16.413, 73.842306],
  [19.199, 73.8595],
  [18.827167, 73.4],
  [19.158944, 73.524306],
  [16.043769, 73.461416],
  [18.365664, 73.755269],
  [19.0467, 72.8677],
  [21.148333, 79.085],
  [17.674, 75.9021],
  [21.0815, 74.7893],
  [18.8626, 73.3328],
  [18.538833, 73.320361],
  [17.808472, 73.511917],
  [18.453389, 73.226167],
  [17.817, 73.085],
  [18.292389, 73.135917],
  [19.616972, 72.841722],
  [18.5474, 73.3414],
  [19.564076, 72.943476],
  [20.191278, 74.454556],
  [19.863611, 72.682222],
  [21.255, 74.955],
  [18.6317, 73.5128],
  [20.484556, 80.533944],
  [19.737778, 73.536333],
  [19.919694, 73.518972],
  [18.276072, 73.622717],
  [19.042472, 73.49],
  [18.660278, 73.463056],
  [18.4028, 77.1178],
  [18.705531, 72.841281],
  [20.432444, 80.091694],
  [17.878073, 73.917893],
  [18.28447, 73.98989],
  [17.839083, 74.034806],
  [17.7258782, 74.2631901],
  [17.8531038, 74.4416478],
  [19.330667, 72.814111],
  [17.663306, 73.696917],
  [17.3184, 74.1082],
  [16.5607, 73.3334],
  [17.304111, 73.240694],
  [19.028694, 73.279056],
  [18.7225, 73.49],
  [16.866664, 73.833331],
  [19.0238, 72.8166],
  [15.752861, 73.665472],
];

function generateLatLng() {
  const baseLat = 18.5195;
  const baseLng = 73.8553;
  const variation = 0.02; // You can adjust the variation as needed

  const points = [];
  data.map((item) => {
    points.push(new google.maps.LatLng(item[0], item[1]));
  });

  return points;
}

// Use the generated coordinates in your getPoints function

// Heatmap data: 500 Points
function getPoints() {
  return generateLatLng();
}

declare global {
  interface Window {
    initMap: () => void;
  }
}
window.initMap = initMap;
export {};
